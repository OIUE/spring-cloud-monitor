[http]
#http服务端口
server.port = 8088
;健康检查间隔
[checker]
interval.second = 3s
health.4xx.sleep = 10m


[eureka]
#eureka server地址，多个可以用逗号分割
urls = http://172.16.1.248:8761/eureka/
# 注册表刷新间隔
interval = 10s

#分布式锁
;[consul]
;;address = 127.0.0.1:8500
;address = 192.168.15.162:6379
;ttl = 9s
;retries = 3
;namesapce =
;用于数据缓存和分布式锁
[redis]
;address = 127.0.0.1:8500
address = 192.168.15.162:6379
password =
db = 0
MaxIdle = 3
MaxActive = 5
IdleTimeout = 100ms
;
ttl = 2s
retries = 3
namesapce =



[influx]
#influxdb地址，多个用逗号分割
#注意：如果安装了多个influxdb，一旦配置多个，顺序不能变，否则数据会错乱。微服务数据是按照influxdb配置顺序作为索引来分片。
;urls = http://172.16.30.54:8086
urls = http://192.168.15.162:8086
#是否自动删除数据
auto.delete = true

[collector]
#采集时间窗口间隔
interval = 10s

## 采集的指标配置，通常不用修改
[metrics.jvm]
;group = mem, heap, nonheap, classes, threads, gc, uptime, cpu,tomcat,normalized,status
mem = mem,mem.free
nonheap = nonheap, nonheap.committed, nonheap.init, nonheap.used
heap = heap, heap.committed, heap.init, heap.used
uptime = instance.uptime, uptime
cpu = systemload.average, processors
threads = threads, threads.peak, threads.daemon
classes = classes, classes.loaded, classes.unloaded
gc = gc.**.count, gc.**.time
status = health_status
#metrics.gc=gc.ps_scavenge.count, gc.ps_scavenge.time, gc.ps_marksweep.count, gc.ps_marksweep.time,gc.parnew.count,gc.parnew.time,gc.concurrentmarksweep.count,gc.concurrentmarksweep.time,gc.g1_young_generation.count,gc.g1_young_generation.time,gc.g1_old_generation.count,gc.g1_old_generation.time,
tomcat = httpsessions.max, httpsessions.active

normalized = normalized.servo.rest.totaltime, normalized.servo.rest.count



